// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "remotecam.h"

/////////////////////////////////////////////////////////////////////////////
// CRemoteCam

IMPLEMENT_DYNCREATE(CRemoteCam, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CRemoteCam properties

CString CRemoteCam::GetHost()
{
	CString result;
	GetProperty(0x1, VT_BSTR, (void*)&result);
	return result;
}

void CRemoteCam::SetHost(LPCTSTR propVal)
{
	SetProperty(0x1, VT_BSTR, propVal);
}

long CRemoteCam::GetPort()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}

void CRemoteCam::SetPort(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}

long CRemoteCam::GetMaxFrames()
{
	long result;
	GetProperty(0x3, VT_I4, (void*)&result);
	return result;
}

void CRemoteCam::SetMaxFrames(long propVal)
{
	SetProperty(0x3, VT_I4, propVal);
}

BOOL CRemoteCam::GetDisableResend()
{
	BOOL result;
	GetProperty(0x4, VT_BOOL, (void*)&result);
	return result;
}

void CRemoteCam::SetDisableResend(BOOL propVal)
{
	SetProperty(0x4, VT_BOOL, propVal);
}

CString CRemoteCam::GetUsername()
{
	CString result;
	GetProperty(0x5, VT_BSTR, (void*)&result);
	return result;
}

void CRemoteCam::SetUsername(LPCTSTR propVal)
{
	SetProperty(0x5, VT_BSTR, propVal);
}

CString CRemoteCam::GetPassword()
{
	CString result;
	GetProperty(0x6, VT_BSTR, (void*)&result);
	return result;
}

void CRemoteCam::SetPassword(LPCTSTR propVal)
{
	SetProperty(0x6, VT_BSTR, propVal);
}

BOOL CRemoteCam::GetIPv6()
{
	BOOL result;
	GetProperty(0x7, VT_BOOL, (void*)&result);
	return result;
}

void CRemoteCam::SetIPv6(BOOL propVal)
{
	SetProperty(0x7, VT_BOOL, propVal);
}

/////////////////////////////////////////////////////////////////////////////
// CRemoteCam operations

void CRemoteCam::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

void CRemoteCam::PropertyPage(HWND hParentWnd)
{
	// Check IUnknown pointer
	if (GetControlUnknown() == NULL)
	{
		::AfxMessageBox(_T("IUnknown is NULL."), MB_OK | MB_ICONERROR);
		return;
	}

	// Get IDispatch pointer
	LPDISPATCH pDispatch = NULL;
	HRESULT hr = GetControlUnknown()->QueryInterface(IID_IDispatch, (LPVOID*)&pDispatch);
	if (FAILED(hr))
	{
		::AfxMessageBox(_T("Object has no property pages."), MB_OK | MB_ICONERROR);
		return;
	}

	// Query ISpecifyPropertyPages pointer
	ISpecifyPropertyPages  *pISPP;
    if (FAILED(pDispatch->QueryInterface(IID_ISpecifyPropertyPages, (void **)&pISPP)))
	{
		pDispatch->Release();
		::AfxMessageBox(_T("Object has no property pages."), MB_OK | MB_ICONERROR);
        return;
	}

	// Get property page GUID
	CAUUID caGUID;
    hr = pISPP->GetPages(&caGUID);
    pISPP->Release();
    if (FAILED(hr))
    {
		pDispatch->Release();
        ::AfxMessageBox(_T("Failed to retrieve property page GUIDs."), MB_OK | MB_ICONERROR);
        return;
    }

	// Pop-up property page
    hr = ::OleCreatePropertyFrame(	hParentWnd, 10, 10, NULL,
									1, (IUnknown**)&pDispatch, caGUID.cElems,
									caGUID.pElems, 0L, 0L, NULL);
    if (FAILED(hr))
        ::AfxMessageBox(_T("OleCreatePropertyFrame failed."), MB_OK | MB_ICONERROR);

    // Free
    ::CoTaskMemFree((void*)caGUID.pElems);
	pDispatch->Release();
}