Granularity and alignment
-------------------------

The Windows heap managers (all versions) have always guaranteed that the 
heap allocations have a start address that is 8-byte aligned and on 
64-bit platforms the alignment is 16-bytes. 

The granularity of heap allocations in 32-bit Windows is 8 bytes and 16 
bytes in 64-bit Windows. 

VirtualAlloc can't allocate less than one page (4KB or 8KB depending
on architecture). And because of the 64 KB allocation granularity, it
usually doesn't make sense to allocate blocks that are less than 64 KB
in size (if you VirtualAlloc one 4 KB page, you waste 60 KB of virtual
memory, which is a finite resource on 32 bit).


Speed
-----

The heap functions are faster than the virtual allocation functions for 
small blocks. Even for blocks that are a small multiple of 64 KB, 
new/malloc/HeapAlloc are likely to be faster because most of the time 
they don't require a transition to kernel mode, unlike VirtualAlloc 
which is a system call. Internally new and malloc call HeapAlloc, but 
the speed difference is negligible because the overhead is really small. 


VirtualAlloc should be used only
--------------------------------

1. If you need allocation aligned on page boundary
   (usually for non-buffered I/O)
2. You don't want to commit full amount of memory (sparse allocation)
3. You want to allocate very large amount at once
4. You're implementing your own custom allocator
   

Heap types
----------

Enabling the low-fragmentation heap (LFH) disables look-aside lists. The 
LFH is not a separate heap. Instead, it is a policy that applications 
can enable for their heaps. When the LFH is enabled, the system 
allocates memory in certain predetermined sizes. When an application 
requests a memory allocation from a heap that has the LFH enabled, the 
system allocates the smallest block of memory that is large enough to 
contain the requested size. The system does not use the LFH for 
allocations larger than 16 KB, whether or not the LFH is enabled. 

A look-aside list is a fast memory allocation mechanism that contains 
only fixed-sized blocks. Look-aside lists are enabled by default for 
heaps that support them. Starting with Windows Vista, look-aside lists 
are not used and the LFH is enabled by default. Look-aside lists are 
faster than general pool allocations that vary in size, because the 
system does not search for free memory that fits the allocation. In 
addition, access to look-aside lists is generally synchronized using 
fast atomic processor exchange instructions instead of mutexes or 
spinlocks. Look-aside lists can be created by the system or drivers. 
They can be allocated from paged or nonpaged pool. 