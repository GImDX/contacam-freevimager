Note On Thread Safety
---------------------

The following code declares an integer thread local variable
and initializes it with a value:

// Example of the __declspec keyword
__declspec( thread ) int tls_i = 1;


CXButtonXP 1.2
--------------

- Better Mouse Hover
- Added DrawThemeParentBackground & IsThemeBackgroundPartiallyTransparent
- Better Themes Support, see the IsThemed() Function
- Centering multiline text


CToasterWnd 1.18
----------------

- Used files: ToasterWnd.h, ToasterWnd.cpp


ffmpeg
------

- Use thread safe open/close implemented in uImager.cpp:
  avcodec_open_thread_safe(AVCodecContext *avctx, AVCodec *codec)
  avcodec_close_thread_safe(AVCodecContext *avctx)


icclib 2.14
-----------

- Thread Safe

- Changed file icc.c:
  * icmFileMem_printf changed to advance pointer
  * Adapted icc_dump & icmHeader_dump to use tabs
  
- Added missing extern to the following two arrays in icc.h:
  extern double icmD50_ary3[3];				/* As an array */
  extern double icmD65_ary3[3];				/* As an array */


ziparchive-2.4.4
----------------

- Thread Safe

- Using older version, new version is GNU Public License

- I added Error Reporting in Exception Handling Class
 

zlib 1.2.3
----------

- Thread Safe

- In zutil.h added a _MSC_VER < 1500 check because the new vs2008 compiler
  nativelly supports vsnprintf
  /* In Win32, vsnprintf is available as the "non-ANSI" _vsnprintf. */
  #    if !defined(vsnprintf) && !defined(NO_vsnprintf) && (_MSC_VER < 1500)
  #      define vsnprintf _vsnprintf
  #    endif

- Preprocessor defines: WIN32, WINDOWS, ASMV, ASMINF
  Note: ASMV for using gvmat32.asm and ASMINF for
  using inffas32.asm  

- Copy from contrib\masmx86 the gvmat32.asm,
  inffas32.asm and gvmat32c.c files to zlib main dir

- Assemble the two asm files in Custom Build:
  ml /c /Zd /coff /nologo /Fo "$(IntDir)\$(InputName).obj" "$(InputPath)"


libjpeg 6b with transupp changes
--------------------------------

- Thread Safe

- Config Changes: jconfig.h, jmorecfg.h

- Many changes to load/save from/to memory!: jpeglib.h, jdatasrc.c, jdatadst.c

- Changed files: jdmarker.c, transupp.c+h, jerror.h, jconfig.h

- From Tiff Lib to support old jpegs:
  Append the following code to the end of jdhuff.c:

  GLOBAL(void)
  jpeg_reset_huff_decode (register j_decompress_ptr cinfo)
  { register huff_entropy_ptr entropy = (huff_entropy_ptr)cinfo->entropy;
    register int ci = 0;
 
     /* Discard encoded input bits, up to the next Byte boundary */
     entropy->bitstate.bits_left &= ~7;
     /* Re-initialize DC predictions to 0 */
     do entropy->saved.last_dc_val[ci] = 0; while (++ci < cinfo->comps_in_scan);
  }

- replaced jcopy_markers_execute_addcomment with a more general
  jcopy_markers_execute_addmarker function

- Preprocessor defines: _MBCS, _LIB, WIN32


giflib 4.1.3
------------

- Made Thread Safe: __declspec(thread) int _GifError = 0;
  (in file gif_err.c)

- #include <Windows.h> and #include <TCHAR.h> in gif_lib.h
  DGifOpenFileName and EGifOpenFileName changed to support UNICODE File Names

- Preprocessor defines: WIN32, _MBCS, _LIB, _OPEN_BINARY,
                        HAVE_IO_H, HAVE_STDARG_H, HAVE_FCNTL_H

- Changes in DGifGetImageDesc(GifFileType * GifFile):

From:

/*** FIXME: Why do we check both of these in order to do this?
 * Why do we have both Image and SavedImages? */     
if (GifFile->Image.ColorMap && GifFile->SavedImages == NULL)      
    FreeMapObject(GifFile->Image.ColorMap);

To:

/*** FIXME: Why do we check both of these in order to do this?
 * Why do we have both Image and SavedImages? */     
if (GifFile->Image.ColorMap/* && GifFile->SavedImages == NULL*/) // Oli Fix 02.01.2005  
    FreeMapObject(GifFile->Image.ColorMap);


Add in EGifPutImageDesc(...):

// Oli Fix 02.01.2005
if (GifFile->Image.ColorMap)
    FreeMapObject(GifFile->Image.ColorMap);

- In many places I added defined(_OPEN_BINARY) to open in binary mode:

open(FileName, O_RDONLY
#if defined(__MSDOS__) || defined(_OPEN_BINARY)                      
 | O_BINARY
#endif /* __MSDOS__ || _OPEN_BINARY */

- Changed DGifOpenFileName() and DGifOpenFileHandle() because if
  the latter one fails the file should not be closed two times with
  fclose and close, but just with fclose!
  

libtiff 3.8.2
-------------

- The error handling routine addresses are not thread safe:
  (Inside the libtiff the TIFFSetWarningHandler or TIFFSetErrorHandler are used!)

  tif_win32.c:
  __declspec(thread) TIFFErrorHandler _TIFFwarningHandler = Win32WarningHandler;
  __declspec(thread) TIFFErrorHandler _TIFFerrorHandler = Win32ErrorHandler;
  
  tiffiop.h:
  extern __declspec(thread) TIFFErrorHandler,_TIFFwarningHandler;
  extern __declspec(thread) TIFFErrorHandler,_TIFFerrorHandler;
  extern __declspec(thread) TIFFErrorHandlerExt _TIFFwarningHandlerExt;

  extern __declspec(thread) TIFFErrorHandlerExt _TIFFerrorHandlerExt;

  tif_warning.c:
  __declspec(thread) TIFFErrorHandlerExt _TIFFwarningHandlerExt = NULL;

  tif_error.c
  __declspec(thread) TIFFErrorHandlerExt _TIFFerrorHandlerExt = NULL;

- Preprocessor defines: USE_WIN32_FILEIO, _MBCS, _LIB, TIF_PLATFORM_CONSOLE, WIN32

- New tiff_config.h

- tif_getimage.c adaptation for DIB_PROGRESS, DoExit() and orientation
  always FLIP_VERTICALLY of:
  gtTileContig(), gtTileSeparate(), gtStripContig(), gtStripSeparate() and
  TIFFRGBAImageBegin()
  
- In tiffio.h add of 3 vars to TIFFRGBAImage Struct

- In tif_ojpeg.c:
  Changed:
	  	OJPEGDecode(register TIFF *tif,tidata_t buf,tsize_t cc,tsample_t s)
		{
			tsize_t bytesperline = isTiled(tif)
                         ? TIFFTileRowSize(tif)
                         : tif->tif_scanlinesize,
            ...
  To:
		OJPEGDecode(register TIFF *tif,tidata_t buf,tsize_t cc,tsample_t s)
		{
			tsize_t bytesperline = isTiled(tif) ?
						TIFFTileRowSize(tif) :
	                    TIFFScanlineSize(tif),
	        ...
  This because tif->tif_scanlinesize is initialized with TIFFScanlineSize()
  when TIFF_UPSAMPLED is not yet set, see changelog:
  2006-03-21  Andrey Kiselev  <dron@ak4719.spb.edu>
  * libtiff/tif_strip.c: Take subsampling in account when calculating
  TIFFScanlineSize().

- In tif_dirwrite.c:
  Added:
        TIFFWritePrivateDataSubDirectory() and
        TIFFWriteNormalSubTag() functions.
        Taken and modified from contrib\pds.
        
  Changed:
		for (dir = (TIFFDirEntry*) data; dircount; dir++, dircount--) {
			TIFFSwabArrayOfShort(&dir->tdir_tag, 2);
			TIFFSwabArrayOfLong(&dir->tdir_count, 2);
		}
  To:
		for (dir = (TIFFDirEntry*) data; dircount; dir++, dircount--)
		{
			if (!((	dir->tdir_type == TIFF_ASCII		||
					dir->tdir_type == TIFF_UNDEFINED	||
					dir->tdir_type == TIFF_NOTYPE		||
					dir->tdir_type == TIFF_BYTE			||
					dir->tdir_type == TIFF_SBYTE)		&&
					dir->tdir_count <= 4))	
				TIFFSwabArrayOfLong(&dir->tdir_offset, 1);
			TIFFSwabArrayOfShort(&dir->tdir_tag, 2);
			TIFFSwabArrayOfLong(&dir->tdir_count, 1);
		}
  Byte family data stored directly in directory should not be swapped!

- In tif_read.c:
  Because of some truncated tiff files and to be more fault tolerant,
  Changed TIFFFillStrip():
		if ( td->td_stripoffset[strip] + bytecount > tif->tif_size) {
			// This error message might seem strange, but it's
			// what would happen if a read were done instead.
			TIFFErrorExt(tif->tif_clientdata, module,
		    "%s: Read error on strip %lu; got %lu bytes, expected %lu",
			    tif->tif_name,
			    (unsigned long) strip,
			    (unsigned long) tif->tif_size - td->td_stripoffset[strip],
			    (unsigned long) bytecount);
			tif->tif_curstrip = NOSTRIP;
			return (0);
		}
		tif->tif_rawdatasize = bytecount;
  To:
		if ( td->td_stripoffset[strip] + bytecount > tif->tif_size)
			tif->tif_rawdatasize = tif->tif_size - td->td_stripoffset[strip];
		else
			tif->tif_rawdatasize = bytecount;
		
- In tiffio.h added TIFFWritePrivateDataSubDirectory() declaration.
  
- In tif_dirinfo.c EXIFTAG_SUBJECTDISTANCE is TIFF_SRATIONAL!


libpng 1.2.56
-------------

- Thread Safe, but do not define PNG_THREAD_UNSAFE_OK!

- Preprocessor defines for release: WIN32, NDEBUG, PNG_LIBPNG_SPECIALBUILD

- Preprocessor defines for debug:   WIN32, DEBUG, _DEBUG, PNG_DEBUG=1,
                                    PNG_LIBPNG_SPECIALBUILD


UAC NSIS installer plugin
-------------------------

- Added silent install switches to the UAC.nsh include file:
  MessageBox ... /SD IDOK


Web interface
-------------

- Using Prototype 1.7 with Scriptaculous 1.9.0
  (compressed prototype.js file with YUI Compressor 2.4.6)
  Adapted slider.js to work also when clicking on the track
