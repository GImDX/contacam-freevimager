FFMPEG command line versions
----------------------------

- ffmpeg.exe (ffmpeg.exe "stripped" of its debug symbols)
- ffmpeg_g.exe (ffmpeg.exe with debug symbols)


FFMPEG
------

1. Copy yasm.exe and nasm.exe to c:\mingw\bin

2. Copy latest c:\mingw\lib\gcc\mingw32\4.8.1\libgcc.a to /c/uimager/ffmpeg/mingw
               c:\mingw\lib\libmingwex.a to /c/uimager/ffmpeg/mingw
   To correctly link we have to remove pow.o from libmingwex.a,
   perform the following in visual studio command prompt:
   $ lib -remove:pow.o libmingwex.a
   $ rename libmingwex.lib libmingwex.a

3. Open msys console:
$ cd /c/uimager/ffmpeg
$ make distclean
$ ./config_mingw
$ make


X264
----

Put library source to /src, extract it and: (get src from: http://download.videolan.org/pub/videolan/x264/snapshots/last_stable_x264.tar.bz2)
./configure --extra-cflags='-mstackrealign' --prefix=/mingw --enable-static --enable-strip --enable-win32thread --disable-cli --disable-avs --disable-gpac --disable-lsmash
make
make install
-> library: /mingw/lib/libx264.a  copy to  /c/uimager/ffmpeg/mingw
Note: to debug SIMD problems try with --disable-asm

  
LAME
----

Put library source to /src, extract it and:
./configure CFLAGS="-mstackrealign" --prefix=/mingw --exec-prefix=/mingw --enable-static --disable-shared --disable-decoder --enable-nasm
make
make install
-> library: /mingw/lib/libmp3lame.a  copy to  /c/uimager/ffmpeg/mingw
Note: to debug SIMD problems try without --enable-nasm


AAC
---

Compiled with internal aac because of gpl conflicts with other aac libs:
https://trac.ffmpeg.org/wiki/Encode/AAC
Native aac usable range >= 192kbps, recommended rate is 240kbps
(VBR is experimental and likely to get even worse results than the CBR)


Is --enable-memalign-hack still necessary?
------------------------------------------

--enable-memalign-hack is not necessary because HAVE_ALIGNED_MALLOC is
defined with mingw and msvc toolchains so that _aligned_malloc,
_aligned_realloc and _aligned_free are used


Default stack alignment incompatibility: GCC uses 16 bytes, MSVC uses 4 bytes
-----------------------------------------------------------------------------

MSVC doesn't guarantee automatic stack alignment of variables, at most 
the variable will be aligned to the stacks alignment (generally 4 bytes 
on 32 bit systems). If you need special alignment, you have to use 
__declspec(align(x)), just like MSVC's SSE types(like __m128), else 
you'll need to use _aligned_malloc instead. 

A global solution is to edit your project so that when compiling with 
GCC on Windows, you pass the GCC option -mincoming-stack-boundary=2. 
Explanation: this tells GCC that the stack is only required to be 
aligned to 2^2=4 bytes, so that GCC now knows that it really must take 
extra care to honor the 16 byte alignment of fixed-size vectorizable 
Eigen types when needed.  

The problem with ffmpeg is that it assumes 16-byte alignment, and also 
has a lot of hand-written SSE assembly, either inline or in separate 
yasm sources. So that the above flag is not working, compilation will 
fail. To fix this problem use -mstackrealign which generates an 
alternate prologue/epilogue that realigns the runtime stack. This 
supports mixing legacy codes that keep a 4-byte aligned stack with 
modern codes that keep a 16-byte stack for SSE compatibility. The 
alternate prologue and epilogue are slower and bigger than the regular 
ones, and they require one dedicated register for the entire function. 
Nested functions encountered while -mstackrealign is on will generate 
warnings, and they will not realign the stack when called. 

ffmpeg is still crashing with the -mstackrealign option, I suppose there
is another alignment problem or just buggy SIMD routines, limit the SIMD
instructions to: 
AV_CPU_FLAG_MMX, AV_CPU_FLAG_MMXEXT, AV_CPU_FLAG_3DNOW, AV_CPU_FLAG_SSE 

with the following code:
unsigned int uiFlags = av_get_cpu_flags();
av_force_cpu_flags(uiFlags & ~(	AV_CPU_FLAG_3DNOWEXT |
								AV_CPU_FLAG_SSE2     |
								AV_CPU_FLAG_SSE2SLOW |
								AV_CPU_FLAG_SSE3     |
								AV_CPU_FLAG_SSE3SLOW |
								AV_CPU_FLAG_SSSE3    |
								AV_CPU_FLAG_SSE4     |
								AV_CPU_FLAG_SSE42    |
								AV_CPU_FLAG_AVX      |
								AV_CPU_FLAG_XOP      |
								AV_CPU_FLAG_FMA3     |
								AV_CPU_FLAG_FMA4     |
								AV_CPU_FLAG_AVX2     ));

or with the following options:
--disable-amd3dnowext
--disable-sse2
--disable-sse3
--disable-ssse3
--disable-sse4
--disable-sse42
--disable-avx
--disable-xop
--disable-fma3
--disable-fma4
--disable-avx2


Possible MinGW Installation Manager Problems
--------------------------------------------

When running the MinGW Installation Manager it may happen that libintl-8.dll is missing:
Delete packages C:\MinGW\var\cache\mingw-get\packages\libintl-*
$ mingw-get install --reinstall msys-libintl
$ mingw-get install --reinstall mingw32-libintl


To update MinGW better to use the MSYS command line
---------------------------------------------------
$ mingw-get update
$ mingw-get upgrade