OpenSSL
-------
- Download latest OpenSSL source from http://www.openssl.org/source/
- Extract the files to the EMPTY C:\uimager\openssl folder


Perl
----
- Download & install ActiveState Perl from http://www.activestate.com/activeperl/downloads
  (64 bit perl on 64 bit Windows otherwise 32 bit one)


Compile 32 bit static (run-time library switch is /MT, see nt.mak)
------------------------------------------------------------------
- Open the Visual Studio Command Prompt (2010) (in the Start menu)
- cd C:\uimager\openssl
- perl Configure VC-WIN32 --prefix=C:\uimager\openssl\Build32MT
- ms\do_ms
- nmake -f ms\nt.mak
- nmake -f ms\nt.mak install


Compile 32 bit static debug (run-time library switch is /MTd, see nt.mak)
-------------------------------------------------------------------------
- Open the Visual Studio Command Prompt (2010) (in the Start menu)
- cd C:\uimager\openssl
- perl Configure debug-VC-WIN32 --prefix=C:\uimager\openssl\Build32MTd
- ms\do_ms
- Open ms\nt.mak and replace all occurrences of /Zi with /Z7.
  The /Zi option works, but it's hard to find the right .pdb
  file without specifying more options. For the sake of simplicity,
  the /Z7 option just embeds all the debug symbols into the .lib files
  (there should be three replacements)
- nmake -f ms\nt.mak
- nmake -f ms\nt.mak install


Adaptations to compile 64 bit 
-----------------------------
- Open the Visual Studio x64 Win64 Command Prompt (2010)
- Use VC-WIN64A instead of VC-WIN32
- Run ms\do_win64a instead of ms\do_ms
- Open ms\nt.mak and replace all occurrences of /Zi with /Z7
  except on the line starting with ASM. For the 64-bit build,
  Visual Studio uses MASM (ml64.exe) to compile assembly code.
  According to MASM's documentation, the /Z7 option is not supported
  (there should be two replacements)
- The outputs of the 64 bit build are still named libeay32.lib and ssleay32.lib,
  you'll have to rename them more sensibly yourself

  
Notes
-----
- To compile a dll version us ntdll.mak instead of nt.mak
  (run-time library switch is then /MD or /MDd for debug)
- Don't try to build 32-bit and 64-bit OpenSSL in the same folder. The first build
  will leave artifacts that will mess up the second build
  (running a clean isn't enough, apparently)
- Don't try to build 32-bit OpenSSL inside of Visual Studio's 64-bit command prompt
  and vice versa. It doesn't work!
- Reference: http://developer.covenanteyes.com/building-openssl-for-visual-studio/
